Monte-Carlo Black-Scholes-Merton simulation2

import numpy as np
import pandas as pd
from pandas_datareader import data as wb
from scipy.stats import norm

ticker = ['MSFT'] 
data = pd.DataFrame()  
data[ticker] = wb.DataReader(ticker, data_source='yahoo', start='2000-1-1')['Adj Close']

data.head()

def d1(S, K, r, stdev, T):
    return (np.log(S / K) + (r + stdev ** 2 / 2) * T) / (stdev * np.sqrt(T))
 
def d2(S, K, r, stdev, T):
    return (np.log(S / K) + (r - stdev ** 2 / 2) * T) / (stdev * np.sqrt(T))

def BSM(S, K, r, stdev, T):
        return (S * norm.cdf(d1(S, K, r, stdev, T))) - (K * np.exp(-r * T) * norm.cdf(d2(S, K, r, stdev, T)))
		

log_return = np.log(1 + data.pct_change())
log_return.head()

stdev = log_return.std()*250**0.5
stdev

r = 0.025
K = 110
T = 110

S = data.iloc[-1]
S

d1(S,K,r,stdev,T)

d2(S,K,r,stdev,T)

BSM(S,K,r,stdev,T)





























