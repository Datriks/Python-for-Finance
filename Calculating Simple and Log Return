
import numpy as np
import pandas as pd 
from pandas_datareader import data as wb
import matplotlib.pyplot as plt
from scipy.stats import norm
%matplotlib inline
plt.rcParams['figure.figsize']=(16,6)
plt.style.use('bmh')
import os,warnings
warnings.simplefilter('ignore')

ticker = ['RBS.L']
data = pd.DataFrame()
data[ticker] = wb.DataReader(ticker,data_source='yahoo',start='2011-1-1')['Adj Close']

#data = wb.DataReader('RBS.l',data_source='yahoo',start='2011-1-1')['Adj Close']
data.head()

#log_return = np.log(1 + data.pct_change())

log_returns = np.log(data/data.shift(1))
log_returns.tail()

data.plot(color = '#292930')

log_returns.plot(color='#438945')

u = log_returns.mean()
u

var = log_returns.var()
var

drift = u - (0.5*var)
drift

stdev = log_returns.std()
stdev

# Brownian Motion:
# r = drift + stdev * e^r

drift.values
stdev.values
---------------------------------------
# Z corresponds to the distance between the mean and the events 
#expressed in the number of standard deviations
norm.ppf(0.95) # this is Z number
x = np.random.rand(10,2)
x

Z = norm.ppf(np.random.rand(10,2))
Z
------------------------------------------------------
t_intervals = 1000
iterations = 10

# daily_returns = e^r
# r=drift + stdev * z

daily_returns = np.exp(drift.values + stdev.values * norm.ppf(np.random.rand(t_intervals,iterations)))
daily_returns

#daily_returns = np.exp(drift + stdev * z)
#daily_returns

plt.plot(daily_returns,color = '#292930',lw=1 )
# St = S0 * daily_returnt
# St+1 = St * daily_returnt+1
# St+999 = St+998 * daily_returnt+999

S0 = data.iloc[-1]
S0

price_list = np.zeros_like(daily_returns)
price_list

price_list[0] = S0
price_list

for t in range(1, t_intervals):
    price_list[t] = price_list[t-1]*daily_returns[t]
    
price_list

plt.plot(price_list,color = '#0B051C',lw=1)





















