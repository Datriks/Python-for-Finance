Monte-Carlo Black-Scholes-Merton simulation

import numpy as np
import pandas as pd 
from pandas_datareader import data as wb
from scipy.stats import norm

$d_1 = \frac{\ln(\frac{S}{K}) + (r + \frac{stdev^2}{2})t}{s \cdot \sqrt{t}}$
$d_2 = d_1 - s \cdot \sqrt{t} = \frac{\ln(\frac{S}{K}) + (r - \frac{stdev^2}{2})t}{s \cdot \sqrt{t}}$

# s - stock price
# k - strike price
# r - risk free rate
# stdev - stad deviation
# T- time horizon(years)

def d1(S, K, r, stdev, T):
    return (np.log(S/k) + (r +stdev**2/2)*T)/(stdev*np.sqrt(T))

def d2(S, K, r, stdev, T):
    return (np.log(S/K) + (r-stdev**2/2)*T)/(stdev*np.sqrt(T))
-----------------------------------------------------------------------
#cummulative normal distribution
#cummulative istribution function
#shows how the data accumulates in time 
#can not be sub zero value or above 1 
norm.cdf(0)
norm.cdf(0.25)
norm.cdf(0.75)
norm.cdf(9)
--------------------------------------------------------------------------
Black_Scholes FunctionÂ¶
$\textbf{C} = SN(d_1) - Ke^{-rt}N(d_2)$

def BSM (S,K,r,stdev,T):
    return (S*norm.cdf(d1(S,K,r,stdev,T))) - (K*np.exp(-r*T)*norm.cdf(d2(S,K,r,stdev,T)))
    
ticker = ['RBS.L']
data = pd.DataFrame()
data[ticker]=wb.DataReader(ticker,data_source='yahoo',start='2011-1-1')['Adj Close']

S=data.iloc[-1]
S

log_returns = np.log(1+data.pct_change())
log_returns.head()

stdev = log_returns.std()*250**0.5
stdev

r = 0.025
K = 144
T = 1

d1(S,K,r,stdev,T)

d2(S,K,r,stdev,T)

BSM(S,K,r,stdev,T)




























