
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
plt.style.use('bmh')
plt.rcParams['figure.figsize'] = (16,6)

rev_m = 200
rev_std = 10
iterations = 250

rev = np.random.normal(rev_m,rev_std,iterations)
rev

plt.plot(rev,c='midnightblue')

cogs = -(rev * np.random.normal(0.4,0.2))

plt.plot(cogs, c='r')

cogs.mean()

cogs.std()

#Suggested Answers follow (usually there are multiple ways to solve a problem in Python).

#Imagine you are an experienced manager and you have forecasted revenues of 200𝑚𝑙𝑛,𝑤𝑖𝑡ℎ 𝑎𝑛 𝑒𝑥𝑝𝑒𝑐𝑡𝑒𝑑 𝑑𝑒𝑣𝑖𝑎𝑡𝑖𝑜𝑛 𝑜𝑓10mln. 
#You are convinced Cogs will be near 40% of the revenues, and their expected deviation is 20% of its own value.

#Use NumPy’s random.random function to simulate the potential revenue stream for 250 iterations 
#(which is the number of trading days in a year) and then the predicted Cogs value.